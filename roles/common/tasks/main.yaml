---
# This playbook contains common plays that will be run on all nodes.

# - name: Debug
#   ansible.builtin.debug:
#     msg: "Source: {{ item.source }} Destination: {{ item.dest }}"
#   loop:
#     - { source: "{{ inventory_hostname }}.crt", dest: "kubelet.crt" }
#     - { source: "{{ inventory_hostname }}.key", dest: "kubelet.key" }

- name: Ensure /etc/hosts is populated correctly
  block:
  - name: Set 127.0.1.1 hostname and fqdn
    become: true
    ansible.builtin.lineinfile:
      path: /etc/hosts
      regexp: '^(127.0.1.1).*$'
      line: '\1 {{ item.value.fqdn }} {{ item.value.name }}'
      backrefs: yes
    with_dict: "{{ nodes[inventory_hostname] }}"

  - name: Set all hostnames in /etc/hosts
    become: true
    ansible.builtin.lineinfile:
      path: /etc/hosts
      line: "{{ item.value['node_info'].ip_address }} {{ item.value['node_info'].fqdn }} {{ item.value['node_info'].name }}"
    loop: "{{ nodes | dict2items }}"

- name: Set the hostname on the machine
  become: true
  ansible.builtin.shell: "hostnamectl hostname {{ item.value.name }}"
  register: hostnamestatus
  with_dict: "{{ nodes[inventory_hostname] }}"

- name: Upgrade all existing packages
  become: true
  ansible.builtin.apt:
    state: latest
    update_cache: yes
    upgrade: dist

- name: Install all required packages
  become: true
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - apt-transport-https
    - build-essential
    - ca-certificates
    - conntrack
    - curl
    - git
    - gnupg
    - golang-go
    - ipset
    - libssl-dev
    - lsb-release
    - neovim
    - network-manager
    - openssl
    - python3-dev
    - python3-neovim
    - ripgrep
    - socat
    - wget
    - zsh

- name: Start the network-manager service
  become: true
  ansible.builtin.service:
    name: NetworkManager
    enabled: true
    state: started
  tags: network-manager

- name: Configure the netplan file for eth0
  become: true
  ansible.builtin.template:
    src: 99-ethernet-config.yaml.j2
    dest: /etc/netplan/99-ethernet-config.yaml
    mode: '0600'
  with_dict: "{{ nodes[inventory_hostname] }}"
  notify: Apply Netplan
  tags: netplan

- name: Check if eth0 is enabled using the ip tool
  become: true
  ansible.builtin.shell: ip link show eth0 | grep -o "state UP"
  register: eth0status
  changed_when: "eth0status.rc != 0"
  tags: netplan

- name: Disable wifi using nmcli
  become: true
  ansible.builtin.command: nmcli radio wifi off
  notify: Restart NetworkManager
  tags: network-manager

- name: Check if WiFi is disabled using nmcli
  become: true
  ansible.builtin.shell: nmcli radio wifi | grep -o "disabled"
  register: wifistatus
  changed_when: "wifistatus.rc != 0"
  tags: network-manager

- name: Configure NetworkManager to set wlan0 as unmanaged
  become: true
  ansible.builtin.template:
    src: set-wifi-unmanaged.conf.j2
    dest: /etc/NetworkManager/conf.d/set-wifi-unmanaged.conf
    mode: '0600'
  notify: Restart NetworkManager
  tags: network-manager

